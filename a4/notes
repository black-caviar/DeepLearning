inputs = keras.Input(shape=(32, 32, 3), name="img")
x = layers.Conv2D(32, 3, activation="relu")(inputs)
x = layers.Dense(256, activation="relu")(x)
outputs = layers.Dense(10)(x)



inputs = keras.Input(shape=(32, 32, 3), name="img")
x = layers.Conv2D(32, 3, activation="relu")(inputs)
x = layers.Conv2D(64, 3, activation="relu")(x)
block_1_output = layers.MaxPooling2D(3)(x)

x = layers.Conv2D(64, 3, activation="relu", padding="same")(block_1_output)
x = layers.Conv2D(64, 3, activation="relu", padding="same")(x)
block_2_output = layers.add([x, block_1_output])

x = layers.Conv2D(64, 3, activation="relu", padding="same")(block_2_output)
x = layers.Conv2D(64, 3, activation="relu", padding="same")(x)
block_3_output = layers.add([x, block_2_output])

x = layers.Conv2D(64, 3, activation="relu")(block_3_output)
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(256, activation="relu")(x)
x = layers.Dropout(0.5)(x)
outputs = layers.Dense(10)(x)






inputs = keras.Input(shape=(32, 32, 3), name="img")
x = layers.Conv2D(3, 9, strides=1, activation="relu", padding='valid')(inputs)
#there may be a pooling layer before the first conv
x = layers.MaxPooling2D((2,2), strides=2)(x)

x = layers.Conv2D(3, 5, strides=1, activation="relu", padding='same')(x)
x = layers.MaxPooling2D((2,2), strides=2)(x)

x = layers.Conv2D(3, 5, strides=1, activation="relu", padding='same')(x)
x = layers.MaxPooling2D((2,2), strides=2)(x)

x = layers.Conv2D(3, 5, strides=1, activation="relu", padding='same')(x)
x = layers.MaxPooling2D((2,2), strides=2)(x)

x = layers.Dense(384, activation="relu")(x)
x = layers.Dense(128, activation="relu")(x)
outputs = layers.Dense(10)(x)



x = layers.Conv2D(32, 3, activation="relu")(inputs)
x = layers.Conv2D(64, 3, activation="relu")(x)
block_1_output = layers.MaxPooling2D(3)(x)

x = layers.Conv2D(64, 3, activation="relu", padding="same")(block_1_output)
x = layers.Conv2D(64, 3, activation="relu", padding="same")(x)
block_2_output = layers.add([x, block_1_output])

x = layers.Conv2D(64, 3, activation="relu", padding="same")(block_2_output)
x = layers.Conv2D(64, 3, activation="relu", padding="same")(x)
block_3_output = layers.add([x, block_2_output])

x = layers.Conv2D(64, 3, activation="relu")(block_3_output)
x = layers.GlobalAveragePooling2D()(x)
x = layers.Dense(256, activation="relu")(x)
x = layers.Dense(128, activation="relu")(x)
x = layers.Dropout(0.5)(x)


model.evaluate(x_test, y_test, verbose=2)
print(model.predict(x_test, y_test))
y_pred = np.argsort(y_pred, axis=1)[:,-5,:]
print(y_pred)
print(labels[y_pred])

plt.figure(figsize=(10,10))
for i in range(25):
    plt.subplot(5,5,i+1)
    plt.xticks([])
    plt.yticks([])
    plt.grid(False)
    plt.imshow(x_test[i])
    plt.xlabel(labels[y_test[i]].decode('utf-8'))
plt.suptitle('CIFAR-10 Train Sample')
plt.show()